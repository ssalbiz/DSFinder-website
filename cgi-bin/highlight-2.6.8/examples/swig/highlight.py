# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.33
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _highlight
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


STANDARD = _highlight.STANDARD
STRING = _highlight.STRING
NUMBER = _highlight.NUMBER
SL_COMMENT = _highlight.SL_COMMENT
ML_COMMENT = _highlight.ML_COMMENT
ESC_CHAR = _highlight.ESC_CHAR
DIRECTIVE = _highlight.DIRECTIVE
DIRECTIVE_STRING = _highlight.DIRECTIVE_STRING
LINENUMBER = _highlight.LINENUMBER
SYMBOL = _highlight.SYMBOL
KEYWORD = _highlight.KEYWORD
STRING_END = _highlight.STRING_END
NUMBER_END = _highlight.NUMBER_END
SL_COMMENT_END = _highlight.SL_COMMENT_END
ML_COMMENT_END = _highlight.ML_COMMENT_END
ESC_CHAR_END = _highlight.ESC_CHAR_END
DIRECTIVE_END = _highlight.DIRECTIVE_END
SYMBOL_END = _highlight.SYMBOL_END
KEYWORD_END = _highlight.KEYWORD_END
IDENTIFIER_BEGIN = _highlight.IDENTIFIER_BEGIN
IDENTIFIER_END = _highlight.IDENTIFIER_END
_UNKNOWN = _highlight._UNKNOWN
_EOL = _highlight._EOL
_EOF = _highlight._EOF
_WS = _highlight._WS
PARSE_OK = _highlight.PARSE_OK
BAD_INPUT = _highlight.BAD_INPUT
BAD_OUTPUT = _highlight.BAD_OUTPUT
BAD_STYLE = _highlight.BAD_STYLE
BAD_BINARY = _highlight.BAD_BINARY
WRAP_DISABLED = _highlight.WRAP_DISABLED
WRAP_SIMPLE = _highlight.WRAP_SIMPLE
WRAP_DEFAULT = _highlight.WRAP_DEFAULT
LOAD_FAILED = _highlight.LOAD_FAILED
LOAD_NEW = _highlight.LOAD_NEW
LOAD_NONE = _highlight.LOAD_NONE
HTML = _highlight.HTML
XHTML = _highlight.XHTML
TEX = _highlight.TEX
LATEX = _highlight.LATEX
RTF = _highlight.RTF
XML = _highlight.XML
ANSI = _highlight.ANSI
XTERM256 = _highlight.XTERM256
HTML32 = _highlight.HTML32
CASE_UNCHANGED = _highlight.CASE_UNCHANGED
CASE_LOWER = _highlight.CASE_LOWER
CASE_UPPER = _highlight.CASE_UPPER
CASE_CAPITALIZE = _highlight.CASE_CAPITALIZE
class LanguageDefinition(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LanguageDefinition, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LanguageDefinition, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _highlight.new_LanguageDefinition(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _highlight.delete_LanguageDefinition
    __del__ = lambda self : None;
    def getSymbolString(*args): return _highlight.LanguageDefinition_getSymbolString(*args)
    def getRawStringPrefix(*args): return _highlight.LanguageDefinition_getRawStringPrefix(*args)
    def getContinuationChar(*args): return _highlight.LanguageDefinition_getContinuationChar(*args)
    def getSyntaxHighlight(*args): return _highlight.LanguageDefinition_getSyntaxHighlight(*args)
    def isIgnoreCase(*args): return _highlight.LanguageDefinition_isIgnoreCase(*args)
    def isKeyword(*args): return _highlight.LanguageDefinition_isKeyword(*args)
    def load(*args): return _highlight.LanguageDefinition_load(*args)
    def isVHDL(*args): return _highlight.LanguageDefinition_isVHDL(*args)
    def allowNestedMLComments(*args): return _highlight.LanguageDefinition_allowNestedMLComments(*args)
    def highlightingDisabled(*args): return _highlight.LanguageDefinition_highlightingDisabled(*args)
    def needsReload(*args): return _highlight.LanguageDefinition_needsReload(*args)
    def enableReformatting(*args): return _highlight.LanguageDefinition_enableReformatting(*args)
    def allowExtEscSeq(*args): return _highlight.LanguageDefinition_allowExtEscSeq(*args)
    def getKeywords(*args): return _highlight.LanguageDefinition_getKeywords(*args)
    def getKeywordClasses(*args): return _highlight.LanguageDefinition_getKeywordClasses(*args)
    def getRegexElements(*args): return _highlight.LanguageDefinition_getRegexElements(*args)
    def getDescription(*args): return _highlight.LanguageDefinition_getDescription(*args)
    def delimiterIsDistinct(*args): return _highlight.LanguageDefinition_delimiterIsDistinct(*args)
    def getDelimiterPairID(*args): return _highlight.LanguageDefinition_getDelimiterPairID(*args)
LanguageDefinition_swigregister = _highlight.LanguageDefinition_swigregister
LanguageDefinition_swigregister(LanguageDefinition)

class RegexElement(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegexElement, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegexElement, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _highlight.new_RegexElement(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _highlight.delete_RegexElement
    __del__ = lambda self : None;
    __swig_setmethods__["open"] = _highlight.RegexElement_open_set
    __swig_getmethods__["open"] = _highlight.RegexElement_open_get
    if _newclass:open = _swig_property(_highlight.RegexElement_open_get, _highlight.RegexElement_open_set)
    __swig_setmethods__["end"] = _highlight.RegexElement_end_set
    __swig_getmethods__["end"] = _highlight.RegexElement_end_get
    if _newclass:end = _swig_property(_highlight.RegexElement_end_get, _highlight.RegexElement_end_set)
    __swig_setmethods__["rePattern"] = _highlight.RegexElement_rePattern_set
    __swig_getmethods__["rePattern"] = _highlight.RegexElement_rePattern_get
    if _newclass:rePattern = _swig_property(_highlight.RegexElement_rePattern_get, _highlight.RegexElement_rePattern_set)
    __swig_setmethods__["kwClass"] = _highlight.RegexElement_kwClass_set
    __swig_getmethods__["kwClass"] = _highlight.RegexElement_kwClass_get
    if _newclass:kwClass = _swig_property(_highlight.RegexElement_kwClass_get, _highlight.RegexElement_kwClass_set)
    __swig_setmethods__["groupID"] = _highlight.RegexElement_groupID_set
    __swig_getmethods__["groupID"] = _highlight.RegexElement_groupID_get
    if _newclass:groupID = _swig_property(_highlight.RegexElement_groupID_get, _highlight.RegexElement_groupID_set)
RegexElement_swigregister = _highlight.RegexElement_swigregister
RegexElement_swigregister(RegexElement)

class RegexDef(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegexDef, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RegexDef, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _highlight.new_RegexDef(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["reString"] = _highlight.RegexDef_reString_set
    __swig_getmethods__["reString"] = _highlight.RegexDef_reString_get
    if _newclass:reString = _swig_property(_highlight.RegexDef_reString_get, _highlight.RegexDef_reString_set)
    __swig_setmethods__["capturingGroup"] = _highlight.RegexDef_capturingGroup_set
    __swig_getmethods__["capturingGroup"] = _highlight.RegexDef_capturingGroup_get
    if _newclass:capturingGroup = _swig_property(_highlight.RegexDef_capturingGroup_get, _highlight.RegexDef_capturingGroup_set)
    __swig_destroy__ = _highlight.delete_RegexDef
    __del__ = lambda self : None;
RegexDef_swigregister = _highlight.RegexDef_swigregister
RegexDef_swigregister(RegexDef)

class CodeGenerator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CodeGenerator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CodeGenerator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _highlight.delete_CodeGenerator
    __del__ = lambda self : None;
    __swig_getmethods__["getInstance"] = lambda x: _highlight.CodeGenerator_getInstance
    if _newclass:getInstance = staticmethod(_highlight.CodeGenerator_getInstance)
    __swig_getmethods__["deleteInstance"] = lambda x: _highlight.CodeGenerator_deleteInstance
    if _newclass:deleteInstance = staticmethod(_highlight.CodeGenerator_deleteInstance)
    def generateFile(*args): return _highlight.CodeGenerator_generateFile(*args)
    def generateString(*args): return _highlight.CodeGenerator_generateString(*args)
    def generateStringFromFile(*args): return _highlight.CodeGenerator_generateStringFromFile(*args)
    def generateCString(*args): return _highlight.CodeGenerator_generateCString(*args)
    def initTheme(*args): return _highlight.CodeGenerator_initTheme(*args)
    def styleFound(*args): return _highlight.CodeGenerator_styleFound(*args)
    def formattingDisabled(*args): return _highlight.CodeGenerator_formattingDisabled(*args)
    def formattingIsPossible(*args): return _highlight.CodeGenerator_formattingIsPossible(*args)
    def initLanguage(*args): return _highlight.CodeGenerator_initLanguage(*args)
    def getLanguage(*args): return _highlight.CodeGenerator_getLanguage(*args)
    def setPrintLineNumbers(*args): return _highlight.CodeGenerator_setPrintLineNumbers(*args)
    def getPrintLineNumbers(*args): return _highlight.CodeGenerator_getPrintLineNumbers(*args)
    def setPrintZeroes(*args): return _highlight.CodeGenerator_setPrintZeroes(*args)
    def getPrintZeroes(*args): return _highlight.CodeGenerator_getPrintZeroes(*args)
    def setFragmentCode(*args): return _highlight.CodeGenerator_setFragmentCode(*args)
    def setLineNumberWidth(*args): return _highlight.CodeGenerator_setLineNumberWidth(*args)
    def getLineNumberWidth(*args): return _highlight.CodeGenerator_getLineNumberWidth(*args)
    def getFragmentCode(*args): return _highlight.CodeGenerator_getFragmentCode(*args)
    def setValidateInput(*args): return _highlight.CodeGenerator_setValidateInput(*args)
    def getValidateInput(*args): return _highlight.CodeGenerator_getValidateInput(*args)
    def getStyleName(*args): return _highlight.CodeGenerator_getStyleName(*args)
    def setBaseFont(*args): return _highlight.CodeGenerator_setBaseFont(*args)
    def getBaseFont(*args): return _highlight.CodeGenerator_getBaseFont(*args)
    def setBaseFontSize(*args): return _highlight.CodeGenerator_setBaseFontSize(*args)
    def getBaseFontSize(*args): return _highlight.CodeGenerator_getBaseFontSize(*args)
    def setPreformatting(*args): return _highlight.CodeGenerator_setPreformatting(*args)
    def setIncludeStyle(*args): return _highlight.CodeGenerator_setIncludeStyle(*args)
    def setSpecialOptions(*args): return _highlight.CodeGenerator_setSpecialOptions(*args)
    def printExternalStyle(*args): return _highlight.CodeGenerator_printExternalStyle(*args)
    def printIndexFile(*args): return _highlight.CodeGenerator_printIndexFile(*args)
    def initIndentationScheme(*args): return _highlight.CodeGenerator_initIndentationScheme(*args)
    def getFormatter(*args): return _highlight.CodeGenerator_getFormatter(*args)
    def setStyleInputPath(*args): return _highlight.CodeGenerator_setStyleInputPath(*args)
    def setStyleOutputPath(*args): return _highlight.CodeGenerator_setStyleOutputPath(*args)
    def setEncoding(*args): return _highlight.CodeGenerator_setEncoding(*args)
    def getStyleInputPath(*args): return _highlight.CodeGenerator_getStyleInputPath(*args)
    def getStyleOutputPath(*args): return _highlight.CodeGenerator_getStyleOutputPath(*args)
    def setTitle(*args): return _highlight.CodeGenerator_setTitle(*args)
    def getTitle(*args): return _highlight.CodeGenerator_getTitle(*args)
    def setHTMLAnchorPrefix(*args): return _highlight.CodeGenerator_setHTMLAnchorPrefix(*args)
    def setMaxInputLineCnt(*args): return _highlight.CodeGenerator_setMaxInputLineCnt(*args)
    def hasWhiteBGColour(*args): return _highlight.CodeGenerator_hasWhiteBGColour(*args)
    def setKeyWordCase(*args): return _highlight.CodeGenerator_setKeyWordCase(*args)
    def addMarkedLine(*args): return _highlight.CodeGenerator_addMarkedLine(*args)
CodeGenerator_swigregister = _highlight.CodeGenerator_swigregister
CodeGenerator_swigregister(CodeGenerator)
CodeGenerator_getInstance = _highlight.CodeGenerator_getInstance
CodeGenerator_deleteInstance = _highlight.CodeGenerator_deleteInstance

class ReGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReGroup, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _highlight.new_ReGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _highlight.delete_ReGroup
    __del__ = lambda self : None;
    __swig_setmethods__["length"] = _highlight.ReGroup_length_set
    __swig_getmethods__["length"] = _highlight.ReGroup_length_get
    if _newclass:length = _swig_property(_highlight.ReGroup_length_get, _highlight.ReGroup_length_set)
    __swig_setmethods__["state"] = _highlight.ReGroup_state_set
    __swig_getmethods__["state"] = _highlight.ReGroup_state_get
    if _newclass:state = _swig_property(_highlight.ReGroup_state_get, _highlight.ReGroup_state_set)
    __swig_setmethods__["kwClass"] = _highlight.ReGroup_kwClass_set
    __swig_getmethods__["kwClass"] = _highlight.ReGroup_kwClass_get
    if _newclass:kwClass = _swig_property(_highlight.ReGroup_kwClass_get, _highlight.ReGroup_kwClass_set)
ReGroup_swigregister = _highlight.ReGroup_swigregister
ReGroup_swigregister(ReGroup)



